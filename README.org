Introduction to R programming for criminology

** Overview of topics to discuss

- What is R? 30 minutes. Brief history. Why use R? Obtaining
  R. Interfaces to R. Getting interactive help.
- What are R packages? 30 minutes. Installing packages. Attaching
  packages. Task views.
- Essential packages for data analysis and visualization -- data.table
  and ggplot2.
- Converting between Tall=tidy=long and wide versions of the same data
  set.

** What is R? 

*** Brief history

R is a free/open-source programming language and environment for data
analysis and visualization. It is a free/open-source implementation of
the S language, which was originally created by John Chambers at Bell
Labs in the 1970s. S was sold as commercial software starting in the
1980s (like SPSS 1968, SAS 1976, STATA 1985). Then in 1993 Ross Ihaka
and Robert Gentlement decided to write R, a new free/open-source
implementation of S. Now there are over a dozen [[https://www.r-project.org/contributors.html][R Core team members]]
(mostly statistics researchers and professors), who are responsible
for the development of the base R system.

*** Why use R? 

*R is free, unlike most other statistical software.* If you know how
to use other statistical software (SPSS, SAS, STATA), and you want to
learn R, try reading [[http://www.burns-stat.com/documents/tutorials/r-relative-to-statistical-packages/][R Relative to Statistical Packages]] and the links
therein. The final quote by Jonathan Baron is

#+BEGIN_SRC 
Another point, which I repeatedly make to students, is that R is free
and will continue to exist. Nothing can make it go away. Once you
learn it, you are no longer subject to price increases (e.g., from
zero, when, as a grad student, you use your advisor’s copy of SAS, to
several hundred dollars or more after you leave). You can take it with
you wherever you go. The investment in learning thus has a long-term
payoff.
#+END_SRC

Note that R is free software both in the sense of "free beer" (no
cost), and "free speech" (you can do whatever you want with it -- this
includes viewing, copying, and modifying the source code).

*R is a programming language*, which means you can use it to do any
computations you want (see [[http://www.burns-stat.com/documents/tutorials/impatient-r/more-r-blank-screen-syndrome/][More R Blank Screen Syndrome]], part of
Impatient R by Pat Burns).

*R is likely the first place that new, state-of-the-art data analysis
software will appear.* This is mainly because there are so many other
people using it -- since R is free, anyone can contribute to improving
it. Pieces of software that extend R are called "packages" which are
useful for all sorts of things, for example

- There are many packages for machine learning in R ([[https://cran.r-project.org/web/packages/mlr/vignettes/mlr.html][mlr]], [[https://topepo.github.io/caret/][caret]]).
- My research project involves developing new machine learning models
  for genomic data, including my recent work on the first log-linear
  time algorithm for constrained optimal segmentation ([[https://github.com/tdhock/coseg][coseg]]).
- In this tutorial we will discuss [[http://ggplot2.org/][ggplot2]], an implementation of
  Wilkinson's Grammar of Graphics. It is a great package for static
  data visualization (making figures for your papers).
- Since 2013 my Google Summer of Code students have been helping me to
  develop [[https://github.com/tdhock/animint][animint, a package for animated interactive data
  visualization]]. It can be used to create interactive web graphics for
  all kinds of data ([[http://members.cbio.mines-paristech.fr/~thocking/WorldBank-facets/][World Bank life expectancy and fertility rate]],
  [[http://members.cbio.mines-paristech.fr/~thocking/figure-timeseries/][temperature in my bioinformatics office]]).

*** Obtaining R

CRAN is the Comprehensive R Archive Network, a set of identical web
sites from which R and its packages can be downloaded. All the web
sites are copied from http://cran.r-project.org, but for speed you
should use the mirror which is closest to you (in Montreal the closest
is currently in [[http://cran.utstat.utoronto.ca/][Toronto]]).

*** Command line versus graphical user interface

R has a command line interface. So you can either (1) type R code
interactively at the R command line, or (2) type R code into a plain
text file (an R script) and then execute that file in R.

RStudio is a graphical user interface for R (developed by the RStudio
company, not by the R Core Team). It simplifies writing and executing
R code. It is recommended to use RStudio for this tutorial.

*** Getting interactive help

To see an example of how to use an R function =FUN=, use
=example(FUN)=. *Exercise:* open an R session on the command line or
in RStudio. Execute the following line of code to see an example of
how to compute the sample mean using the =mean= function.

#+BEGIN_SRC R
example(mean)
#+END_SRC

Note: we say that we are calling the function =example= with the
argument =mean=.

** What are R packages? 

R packages contain R code and data sets which extend the functionality
of R. There are thousands of R packages, each with different
functions, developed by different people. For example in this tutorial
we will discuss the [[https://CRAN.R-project.org/package=data.table][data.table]] package.

*Exercise:* to check if the data.table package is installed, type the
following on the command line:

#+BEGIN_SRC R
  library(data.table)
#+END_SRC

If the package is not present, there will be an error message

#+BEGIN_SRC R
Error in library(data.table) : there is no package called ‘data.table’
#+END_SRC

Whenever you get an error message, you can usually get more
information about what that error means by looking up the help page of
the function that you were using. *Exercise:* use the help system to
figure out where the =library= function looks for packages. Type one
of the following on the command line to get help on the =library=
function. Hint: check the =lib.loc= argument.

#+BEGIN_SRC R
  ?library
  help(library)
  help("library")
#+END_SRC

*Exercise:* what is the difference between =library= and ="library"=?
=library= is a function and ="library"= is a character string. To see
a brief description of any R object, use the =str= function:

#+BEGIN_SRC R
  str(library)
  str("library")
#+END_SRC

** Reading date and times into R

=fread= converts a date/time column in a CSV file to a character
vector columns of a =data.table=. The =strptime= function can be used
to convert most date/time strings to numeric format. One example of
when this doesn't work is

https://github.com/tdhock/montreal-velos/blob/master/velos.R

Some packages that attempt to simplify reading of dates and times are
[[https://github.com/gaborcsardi/parsedate][parsedate]] and [[https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html][lubridate]].

** Named capture regular expressions

https://github.com/tdhock/regex-tutorial

** Data input, subsetting, and output

utils::read.table and utils::read.csv are the functions provided by
the base R system for reading data tables into R's memory. relatively
slow and difficult to use, compared to data.table::fread.

** Reading and writing files from other programs in R

SAS, SPSS, STATA http://haven.tidyverse.org/

Excel -- just save as CSV. Or use http://readxl.tidyverse.org/

** Converting between tall and wide data

TODO: example using one of our data sets

Examples taken from [[https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html][data.table reshape vignette]].

Tidy data JSS paper https://www.jstatsoft.org/article/view/v059i10

** Other example using criminology data.

