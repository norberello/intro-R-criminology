Introduction to R programming for criminology

** Overview of topics to discuss

- What is R? 30 minutes. Brief history. Why use R? Obtaining
  R. Interfaces to R. Getting interactive help.
- What are R packages? 30 minutes. Installing packages. Attaching
  packages. Task views.
- Essential packages for data analysis and visualization -- data.table
  and ggplot2.
- Converting between Tall=tidy=long and wide versions of the same data
  set.

** What is R? 

*** Brief history

R is a free/open-source programming language and environment for data
analysis and visualization. It is a free/open-source implementation of
the S language, which was originally created by John Chambers at Bell
Labs in the 1970s. S was sold as commercial software starting in the
1980s (like SPSS 1968, SAS 1976, STATA 1985). Then in 1993 Ross Ihaka
and Robert Gentlement decided to write R, a new free/open-source
implementation of S. Now there are over a dozen [[https://www.r-project.org/contributors.html][R Core team members]]
(mostly statistics researchers and professors), who are responsible
for the development of the base R system.

*** Why use R? 

*R is free, unlike most other statistical software.* If you know how
to use other statistical software (SPSS, SAS, STATA), and you want to
learn R, try reading [[http://www.burns-stat.com/documents/tutorials/r-relative-to-statistical-packages/][R Relative to Statistical Packages]] and the links
therein. The final quote by Jonathan Baron is

#+BEGIN_SRC 
Another point, which I repeatedly make to students, is that R is free
and will continue to exist. Nothing can make it go away. Once you
learn it, you are no longer subject to price increases (e.g., from
zero, when, as a grad student, you use your advisor’s copy of SAS, to
several hundred dollars or more after you leave). You can take it with
you wherever you go. The investment in learning thus has a long-term
payoff.
#+END_SRC

Note that R is free software both in the sense of "free beer" (no
cost), and "free speech" (you can do whatever you want with it -- this
includes viewing, copying, and modifying the source code).

*R is a programming language*, which means you can use it to do any
computations you want (see [[http://www.burns-stat.com/documents/tutorials/impatient-r/more-r-blank-screen-syndrome/][More R Blank Screen Syndrome]], part of
Impatient R by Pat Burns).

*R is likely the first place that new, state-of-the-art data analysis
software will appear.* This is mainly because there are so many other
people using it -- since R is free, anyone can contribute to improving
it. Pieces of software that extend R are called "packages" which are
useful for all sorts of things, for example

- There are many packages for machine learning in R ([[https://cran.r-project.org/web/packages/mlr/vignettes/mlr.html][mlr]], [[https://topepo.github.io/caret/][caret]]).
- My research project involves developing new machine learning models
  for genomic data, including my recent work on the first log-linear
  time algorithm for constrained optimal segmentation ([[https://github.com/tdhock/coseg][coseg]]).
- In this tutorial we will discuss [[http://ggplot2.org/][ggplot2]], an implementation of
  Wilkinson's Grammar of Graphics. It is a great package for static
  data visualization (making figures for your papers).
- Since 2013 my Google Summer of Code students have been helping me to
  develop [[https://github.com/tdhock/animint][animint, a package for animated interactive data
  visualization]]. It can be used to create interactive web graphics for
  all kinds of data ([[http://members.cbio.mines-paristech.fr/~thocking/WorldBank-facets/][World Bank life expectancy and fertility rate]],
  [[http://members.cbio.mines-paristech.fr/~thocking/figure-timeseries/][temperature in my bioinformatics office]]).

*** Obtaining R

CRAN is the Comprehensive R Archive Network, a set of identical web
sites from which R and its packages can be downloaded. All the web
sites are copied from http://cran.r-project.org, but for speed you
should use the mirror which is closest to you (in Montreal the closest
is currently in [[http://cran.utstat.utoronto.ca/][Toronto]]).

*** Command line versus graphical user interface

R has a command line interface. So you can either (1) type R code
interactively at the R command line, or (2) type R code into a plain
text file (an R script) and then execute that file in R.

RStudio is a graphical user interface for R (developed by the RStudio
company, not by the R Core Team). It simplifies writing and executing
R code. It is recommended to use RStudio for this tutorial.

*** Getting interactive help

To see an example of how to use an R function =FUN=, use
=example(FUN)=. *Exercise:* open an R session on the command line or
in RStudio. Execute the following line of code to see an example of
how to compute the sample mean using the =mean= function.

#+BEGIN_SRC R
example(mean)
#+END_SRC

Note: we say that we are calling the function =example= with the
argument =mean=.

*** R is a vectorized language

We say that R is a vectorized language because most data in R is a
*vector* (with N > 1 elements). For example the variable =x <- c(0:10, 50)=
is a numeric vector of length 12.

#+BEGIN_SRC R
  x <- c(0:10, 50)
  x
  str(x)
#+END_SRC

Note that 
- =:= is the colon operator, for constructing a sequence (in this case
  the integers from 0 to 10).
- =c= is a function that *c*oncatenates its arguments (separated by
  commas) into a vector. =0:10= is the first argument and =50= is the
  second argument.
- =<-= is the assignment operator that takes the value on the right
  and assigns it to the variable name on the left. When I read it, I
  think "gets" or "is assigned the value of" (like an arrow pointing
  left, not less than minus).
- =str= is a function that prints the *str*ucture of any R object.

*Exercise:* create a vector of integers from 50 to 65, then store it
in the variable =positive.vec=. Create another vectors of integers
from -10 to -5, then store it in the variable
=negative.vec=. Concatenate these two vectors and store the result in
a new variable called =positive.and.negative.vec=. Use =str= on the
new variables that you have created. What differences are there with
the output of =str(x)=?

Note: you can get help about any function in R using =help("name of
the function")=, for example =help("<-")= or =help(":")=.

*Exercise:* what is the difference between =library= and ="library"=?
=library= is a function and ="library"= is a character string. To see
a brief description of any R object, use the =str= function:

#+BEGIN_SRC R
  str(library)
  str("library")
#+END_SRC

So when we use call the =mean= function with  This constrasts
other languages like C where computations must be expressed in terms
of *scalars* (variables each with 1 element).

** What are R packages? 

R packages contain R code and data sets which extend the functionality
of R. There are thousands of R packages, each with different
functions, developed by different people. For example in this tutorial
we will discuss the [[https://CRAN.R-project.org/package=data.table][data.table]] package.

*Exercise:* to check if the data.table package is installed, type the
following on the command line:

#+BEGIN_SRC R
  library(data.table)
#+END_SRC

If the package is not present, there will be an error message

#+BEGIN_SRC R
Error in library(data.table) : there is no package called ‘data.table’
#+END_SRC

Whenever you get an error message, you can usually get more
information about what that error means by looking up the help page of
the function that you were using. *Exercise:* use the help system to
figure out where the =library= function looks for packages. Hint:
check the =lib.loc= argument.

*** install.packages from CRAN to your computer

=install.packages("data.table")= means "download the most recent
version of the data.table package from CRAN, and install it for use on
my local computer." *Exercise:* install the data.table package.

More precisely, =install.packages= looks for the package in the web
sites listed in

#+BEGIN_SRC R
  getOption("repos")
#+END_SRC

and installs the first package it finds to the first item of
=.libPaths()=. Note that the =repos= option in RStudio defaults to
"https://cran.rstudio.com" and can be changed in Tools -> Global
Options -> Packages -> CRAN mirror. If you don't use RStudio, you can
use the R code

#+BEGIN_SRC R
options(repos=c(
          "http://www.bioconductor.org/packages/release/bioc",
          "http://r-forge.r-project.org",
          "http://probability.ca/cran",
          "http://cran.r-project.org"))
#+END_SRC

Note: if you put the above code in your =~/.Rprofile= file, it will be
executed every time R is started. The =~= means "home directory" and
it can be found on your computer via the R command

#+BEGIN_SRC R
normalizePath("~")
#+END_SRC

*** install_github packages to your computer

Some new versions of CRAN packages can be downloaded from GitHub. For
example a newer version of data.table is available from
https://github.com/Rdatatable/data.table and installable via the R
commands

#+BEGIN_SRC R
remotes::install_github("Rdatatable/data.table")
devtools::install_github("Rdatatable/data.table")
#+END_SRC

The double colon syntax means =package::object= -- in this case it
means that both the =remotes= and the =devtools= packages contain a
function called =install_github=. Both should work for installing
packages from GitHub.

*Exercise:* install the =namedCapture= package from one of my github
repositories, https://github.com/tdhock/namedCapture. Hint: you will
first need to use =install.packages= to get a copy of either =remotes=
or =devtools=.

Caveat: some R packages contain compiled code. Packages with compiled
code are compiled to binary form for you on CRAN, but not on
GitHub. So if you want to install one of these packages from GitHub,
your computer will need a compiler.
- Windows Rtools http://cran.r-project.org/bin/windows/Rtools/
- Mac Xcode https://developer.apple.com/downloads
- Linux usually has compilation tools by default, but you may need to
  install a package called =r-devel= or =r-base-dev=.

*** How to find other packages?

- [[https://cran.r-project.org/web/views/][Task views]] are topic-based lists of packages.
- There are various local ([[http://www.meetup.com/Montreal-R-User-Group/][Montreal R User Group]], [[http://raquebec.ulaval.ca/2017/][R à QC]]) and
  international meetings ([[https://user2017.brussels/][useR2017 in Brussels]]).
- Community news sites: [[https://www.r-bloggers.com/][R-Bloggers]], [[https://rweekly.org/][RWeekly]].

*** Section summary

- =library=
- install.packages downloads packages from CRAN-like 

** Reading date and times into R

=fread= converts a date/time column in a CSV file to a character
vector columns of a =data.table=. The =strptime= function can be used
to convert most date/time strings to numeric format. 

Criminology data example [[file:transactions.txt]]

#+BEGIN_SRC 
seller buyer date
567    577   2007-10-30
225    567   2007-11-15
1019   1190  2007-11-19
2      983   2007-11-26
2      983   2007-11-27
567    1257  2007-11-28
#+END_SRC

one data set when strptime did not work for me is
https://github.com/tdhock/montreal-velos/blob/master/velos.R -- I had
to use a character vector to convert non-standard month names to
numeric dates.

*Packages* that attempt to simplify reading of dates and times are
[[https://github.com/gaborcsardi/parsedate][parsedate]] and [[https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html][lubridate]].

** Named capture regular expressions

https://github.com/tdhock/regex-tutorial

** Data input, subsetting, and output

utils::read.table and utils::read.csv are the functions provided by
the base R system for reading data tables into R's memory. relatively
slow and difficult to use, compared to data.table::fread.

** Reading and writing files from other programs in R

SAS, SPSS, STATA http://haven.tidyverse.org/

Excel -- just save as CSV. Or use http://readxl.tidyverse.org/

** Converting between tall and wide data

TODO: example using one of our data sets

Examples taken from [[https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html][data.table reshape vignette]].

Tidy data JSS paper https://www.jstatsoft.org/article/view/v059i10

** Other example using criminology data.

