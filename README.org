Introduction to R programming for criminology

DOWNLOAD LINK: https://github.com/tdhock/intro-R-criminology/archive/master.zip

** Overview of topics to discuss

- What is R? Brief history. Why use R? Obtaining R. Interfaces to
  R. 
- R basics. Getting interactive help. Vectors, types, calling
  functions, names, subsetting.
- What are R packages? Installing packages from CRAN and
  GitHub. Attaching packages. How to find packages?
- data.table, an efficient package for data manipulation.
- Extra topics: data visualization using the ggplot2 package,
  dates/times, regular expressions, reading/writing STATA/SPSS/SAS
  files in R, for/while/if.

** What is R? 
   
*** Brief history

R is a free/open-source programming language and environment for data
analysis and visualization. It is a free/open-source implementation of
the S language, which was originally created by John Chambers at Bell
Labs in the 1970s. S was sold as commercial software starting in the
1980s (like SPSS 1968, SAS 1976, STATA 1985). Then in 1993 Ross Ihaka
and Robert Gentlement decided to write R, a new free/open-source
implementation of S. Now there are over a dozen [[https://www.r-project.org/contributors.html][R Core team members]]
(mostly statistics researchers and professors), who are responsible
for the development of the base R system.

*** Why use R? 

*R is free, unlike most other statistical software.* If you know how
to use other statistical software (SPSS, SAS, STATA), and you want to
learn R, try reading [[http://www.burns-stat.com/documents/tutorials/r-relative-to-statistical-packages/][R Relative to Statistical Packages]] and the links
therein. The final quote by Jonathan Baron is

#+BEGIN_SRC 
Another point, which I repeatedly make to students, is that R is free
and will continue to exist. Nothing can make it go away. Once you
learn it, you are no longer subject to price increases (e.g., from
zero, when, as a grad student, you use your advisorâ€™s copy of SAS, to
several hundred dollars or more after you leave). You can take it with
you wherever you go. The investment in learning thus has a long-term
payoff.
#+END_SRC

Note that R is free software both in the sense of "free beer" (no
cost), and "free speech" (you can do whatever you want with it -- this
includes viewing, copying, and modifying the source code).

*R is a programming language*, which means you can use it to do any
computations you want (see [[http://www.burns-stat.com/documents/tutorials/impatient-r/more-r-blank-screen-syndrome/][More R Blank Screen Syndrome]], part of
Impatient R by Pat Burns).

*R is likely the first place that new, state-of-the-art data analysis
software will appear.* This is mainly because there are so many other
people using it -- since R is free, anyone can contribute to improving
it. Pieces of software that extend R are called "packages" which are
useful for all sorts of things, for example

- There are many packages for machine learning in R ([[https://cran.r-project.org/web/packages/mlr/vignettes/mlr.html][mlr]], [[https://topepo.github.io/caret/][caret]]).
- My research project involves developing new machine learning models
  for genomic data, including my recent work on the first log-linear
  time algorithm for constrained optimal segmentation ([[https://github.com/tdhock/coseg][coseg]]).
- In this tutorial we will discuss [[http://ggplot2.org/][ggplot2]], an implementation of
  Wilkinson's Grammar of Graphics. It is a great package for static
  data visualization (making figures for your papers).
- Since 2013 my Google Summer of Code students have been helping me to
  develop [[https://github.com/tdhock/animint][animint, a package for animated interactive data
  visualization]]. It can be used to create interactive web graphics for
  all kinds of data ([[http://members.cbio.mines-paristech.fr/~thocking/WorldBank-facets/][World Bank life expectancy and fertility rate]],
  [[http://members.cbio.mines-paristech.fr/~thocking/figure-timeseries/][temperature in my bioinformatics office]]).

*** Obtaining R

CRAN is the Comprehensive R Archive Network, a set of identical web
sites from which R and its packages can be downloaded. All the web
sites are copied from http://cran.r-project.org, but for speed you
should use the mirror which is closest to you (in Montreal the closest
is currently in [[http://cran.utstat.utoronto.ca/][Toronto]]).

*** Command line versus graphical user interface

R has a command line interface. So you can either (1) type R code
interactively at the R command line, or (2) type R code into a plain
text file (an R script) and then execute that file in R.

RStudio is a graphical user interface for R (developed by the
RStudio company, not by the R Core Team). It simplifies writing and
executing R code. It is recommended to use RStudio for this tutorial.

*** Summary

- The base R system is free/open-source software developed since 1993
  by R-core, a team of statisticians and programmers.
- There are many reasons to use R (free, popular, state-of-the-art).
- R and its source code can be obtained free of charge from CRAN, the
  Comprehensive R Archive Network.
- R is inherently a command line program, but there are several
  graphical user interfaces, including RStudio.

** R basics

*** Getting interactive help

To see an example of how to use an R function =FUN=, use
=example(FUN)=. *Exercise:* open an R session on the command line or
in RStudio. Execute the following line of code to see an example of
how to compute the sample mean using the =mean= function.

#+BEGIN_SRC R
  example(mean)
#+END_SRC

Note: we say that we are calling the function =example= with the
argument =mean=.

*** R is a vectorized language

We say that R is a vectorized language because most data in R is a
*vector* (with N > 1 elements), as opposed to a *scalar* (with 1
element). For example the variable =x <- c(0:10, 50)= is a numeric
vector of length 12. The =mean= function takes a vector argument like
=x= and returns its mean as a scalar.

#+BEGIN_SRC R
  x <- c(0:10, 50)
  x
  str(x)
  xm <- mean(x)
  str(xm)
#+END_SRC

Note that 
- =:= is the colon operator, for constructing a sequence (in this case
  the integers from 0 to 10).
- =c= is a function that *c*oncatenates its arguments (separated by
  commas) into a vector. =0:10= is the first argument and =50= is the
  second argument.
- =<-= is the assignment operator that takes the value on the right
  and assigns it to the variable name on the left. When I read it, I
  think "gets" or "is assigned the value of" (like an arrow pointing
  left, not less than minus).
- =str= is a function that prints the *str*ucture of any R object.

*Exercise:* create a vector of integers from 50 to 65, then store it
in the variable =positive.vec=. Create another vector of integers from
-10 to -5, then store it in the variable =negative.vec=. Concatenate
these two vectors and store the result in a new variable called
=positive.and.negative.vec=. Use =str= on the new variables that you
have created. What differences are there with the output of =str(x)=?

*** Types in R

Note: you can get help about any function in R using =help("name of
the function")=, for example =help("<-")= or =help(":")=.

*Exercise:* read =help(":")=. The Value section describes the return
value of the function. What is the type?

There are three basic types in R: double, integer, and
character. These types are reported by =str= (along with others we
will discuss later).

| C type | str() | R as.*       | R is.*       | literals             |
|--------+-------+--------------+--------------+----------------------|
| double | num   | as.double    | is.double    | 0, 1e-5, Inf, 2e-308 |
| int    | int   | as.integer   | is.integer   | 0L, 50L, -6L         |
| char*  | chr   | as.character | is.character | "0" or '0' or "zero" |

- Literals are what you write in R code to express a certain
  value. The e is short for exponent (times 10^), Inf is short for
  infinity, and L is short for long integer.
- Note that =num= is short for "numeric" and =double= is short for
  "double precision floating point" (real number possibly with
  decimal).

*Exercise:* Use =str= to find out the types of the following R
 expressions. What can you conclude about the rules that =c= uses to
 concatenate values of different types?

#+BEGIN_SRC R
  0:10
  50
  "15"
  c(0:10, 50, "15")
#+END_SRC

*Exercise:* use the as.* functions to convert between types. Can you
predict the output?

#+BEGIN_SRC R
  ## what happens when you convert double to int or character?
  x <- c(0:10, 50)
  as.integer(x)
  as.character(x)
  ## what happens when you convert character to int or double?
  chr.vec <- c("0", "-5.5", "2", "Inf", "Male", "Female")
  as.integer(chr.vec)
  as.double(chr.vec)
#+END_SRC

*** Calling functions with positional versus named arguments

There are two ways to specify arguments to functions in R. So far we
have mostly seen *positional arguments*, fun(value1, value2). In the
code below, we say that =0:10= is the first argument of =c= and =50=
is the second argument (separated by commas).

#+BEGIN_SRC R
  num.vec <- c(0:10, 50)
  mean(num.vec)
#+END_SRC

But we can also use *named arguments*, fun(name1=value1,
name2=value2), which are also separated by commas. Note that
- named arguments can appear in any order (not necessarily the same
  order as on the help page).
- if you don't specify an argument at all (for example na.rm on the
  first line below), then it takes its default value (as specified on
  the function's help page).

#+BEGIN_SRC R
  mean(x=num.vec)
  mean(x=num.vec, na.rm=TRUE)
  mean(na.rm=TRUE, x=num.vec) 
#+END_SRC

You can also mix positional with named arguments. 

#+BEGIN_SRC R
  na.vec <- c(NA, num.vec)
  mean(na.vec)
  mean(na.vec, na.rm=TRUE)
#+END_SRC

By the way, =NA= is short for "none associated" -- a missing
value. And "rm" is short for "remove" so =na.rm= is short for "remove
missing" values.

*Exercise:* type =NA= and then TAB at the R command line -- you should
see a list of R objects that begin with NA. Use =str= to find out the
types of each (yes, there are different types of missing
values). Usually you can just use =NA= (without any suffix) in your R
code to indicate a missing value, but sometimes it will be necessary
to specify the type (using one of the suffixes).

*Exercise:* what happens when you use =c= with named arguments?

*** Names and subsetting

Most R objects can have names. For example consider the following
vector which stores the birth years of several of my family members.

#+BEGIN_SRC R
  birth.year.vec <- c(
    Toby=1984,
    Maude=1983,
    Morgan=1985)
  birth.year.vec
  str(birth.year.vec)
#+END_SRC

You can use subset operations to look up the birth year of a person by
name or number. The double-square-bracket operator is used to select
exactly one element:

#+BEGIN_SRC R
  birth.year.vec[["Toby"]]
  birth.year.vec[[1]]
#+END_SRC

*Exercise:* select one of the other elements of =birth.year.vec=,
using a name or a number.

*Exercise:* what are some names and numbers that you think should not
work? Why? Try them.

The single-square-bracket operator is used to select any number of
elements:

#+BEGIN_SRC R
  birth.year.vec[c("Maude", "Toby")]
  birth.year.vec[c(1, 3)]
  birth.year.vec[-1]
  birth.year.vec[0]
#+END_SRC

*Exercise:* select another subset (say Toby and Morgan) using a
variable. Hint: use the =<-= assignment operator to assign a name or
number to a new variable name.

*Exercise:* what happens when you use missing values, large numbers,
or unknown names?

*** Summary
- R has an interactive help system, =help(fun)= and =example(fun)=.
- Most data in R are vectors which are usually one of three basic
  types: double, integer, character.
- Functions can be called using either positional or named arguments.
- Most R objects can have names, which are useful in subset
  operations.

** What are R packages? 

R packages contain R code and data sets which extend the functionality
of R. There are thousands of R packages, each with different
functions, developed by different people. For example in this tutorial
we will discuss the [[https://CRAN.R-project.org/package=data.table][data.table]] package.

*Exercise:* to check if the data.table package is installed, type the
following on the command line:

#+BEGIN_SRC R
  library(data.table)
#+END_SRC

If the package is not present, there will be an error message

#+BEGIN_SRC R
Error in library(data.table) : there is no package called â€˜data.tableâ€™
#+END_SRC

Whenever you get an error message, you can usually get more
information about what that error means by looking up the help page of
the function that you were using. *Exercise:* use the help system to
figure out where the =library= function looks for packages. Hint:
check the =lib.loc= argument.

*** install.packages from CRAN to your computer

=install.packages("data.table")= means "download the most recent
version of the data.table package from CRAN, and install it for use on
my local computer." *Exercise:* install the data.table package.

More precisely, =install.packages= looks for the package in the web
sites listed in

#+BEGIN_SRC R
  getOption("repos")
#+END_SRC

and installs the first package it finds to the first item of
=.libPaths()=. Note that the =repos= option in RStudio defaults to
"https://cran.rstudio.com" and can be changed in Tools -> Global
Options -> Packages -> CRAN mirror. If you don't use RStudio, you can
use the R code

#+BEGIN_SRC R
options(repos=c(
          "http://www.bioconductor.org/packages/release/bioc",
          "http://r-forge.r-project.org",
          "http://probability.ca/cran",
          "http://cran.r-project.org"))
#+END_SRC

Note: if you put the above code in your =~/.Rprofile= file, it will be
executed every time R is started. The =~= means "home directory" and
it can be found on your computer via the R command

#+BEGIN_SRC R
normalizePath("~")
#+END_SRC

*** install_github packages to your computer

Some new versions of CRAN packages can be downloaded from GitHub, a
web site that provides free code hosting for free/open-source
projects. For example a newer version of data.table is available from
https://github.com/Rdatatable/data.table and installable via the R
commands

#+BEGIN_SRC R
remotes::install_github("Rdatatable/data.table")
devtools::install_github("Rdatatable/data.table")
#+END_SRC

The double colon syntax means =package::object= -- in this case it
means that both the =remotes= and the =devtools= packages contain a
function called =install_github=. Both should work for installing
packages from GitHub.

*Exercise:* install the =namedCapture= package for named capture
regular expressions from one of my github repositories,
https://github.com/tdhock/namedCapture. Hint: you will first need to
use =install.packages= to get a copy of either =remotes= or
=devtools=.

Caveat: some R packages contain compiled code. Packages with compiled
code are compiled to binary form for you on CRAN, but not on
GitHub. So if you want to install one of these packages from GitHub,
your computer will need a compiler.
- Windows Rtools http://cran.r-project.org/bin/windows/Rtools/
- Mac Xcode https://developer.apple.com/downloads
- Linux usually has compilation tools by default, but you may need to
  run a command like =sudo aptitude install r-base-dev=.

*** Attaching packages

There are two ways of accessing functions and data in a package. For
example consider the =install_github= function in the =remotes=
package. You can either use that function via

#+BEGIN_SRC R
remotes::install_github("Rdatatable/data.table")
#+END_SRC

which does NOT attach the package. Otherwise you can attach the
package with =library=, which gives you access to all its exported
functions without having to use the =remotes::= prefix.

#+BEGIN_SRC R
library(remotes)
install_github("Rdatatable/data.table")
#+END_SRC

There are advantages and disadvantages to both approaches:
- *Attach using library for convenient interactive use* when a package
  is attached, its contents are available for TAB-completion.
- *Use double-colon syntax to clarify where each function comes from.*
  If you see an R script with only =install_github= (no pkg::) you may
  wonder, in which package is that defined?

To see a list of currently attached packages, check the search list.

#+BEGIN_SRC R
  search()
#+END_SRC

Note: there is also the triple-colon syntax =pkg:::object= which can
be used to access non-exported objects in a package that are supposed
to be hidden from the user. However, since R is free/open-source
software, the source code for everything is available (even
non-exported objects). This is sometimes useful when you really want
to see how someone else's code works, for example =cghseg:::segmeanCO=
is an R interface to C code that solves an optimal change-point
detection problem.

*** How to find packages?

- [[https://cran.r-project.org/web/views/][Task views]] are topic-based lists of packages.
- There are various local ([[http://www.meetup.com/Montreal-R-User-Group/][Montreal R User Group]], [[http://raquebec.ulaval.ca/2017/][R Ã  QC]]) and
  international meetings ([[https://user2017.brussels/][useR2017 in Brussels]]).
- Community news sites: [[https://www.r-bloggers.com/][R-Bloggers]], [[https://rweekly.org/][RWeekly]].

*Exercise:* it seems to me like network analysis and visualization is
an important topic in criminology. go to the Task Views web page, and
try to find an R package for network visualization. Hint: in
statistics we refer to data visualization as statistical graphics.

*Get involved with the R community.* There is not yet an R task view
for criminology. R is an open project, so you could be the first to
create one! All you need is some time to review the existing packages,
and to write some brief summary of how the relevant ones are useful
for criminology. (you can also ask for contributions from others who
use R in your field)

*** Section summary

- An R package contains code and data for a specific field of data
  analysis.
- =install.packages= downloads the most recent version of a package
  from CRAN, and installs it on your computer.
- =install_github= downloads a package from GitHub, and installs in on
  your computer.
- Packages can be used either via double-colon syntax or via
  =library=.
- There are a variety of resources online and in real life to help you
  find packages for particular problems.

** data.table, an efficient package for data manipulation

*** Introduction to data.frame

A =data.frame= is the object which represents a two dimensional data
table (a CSV file). Like CSV files, a data.frame can have columns of
different types. For example, let's read a small data set using the
base R function =read.csv=:

#+BEGIN_SRC R
  families.df <- read.csv("melt_default.csv")
  families.df
  str(families.df)
#+END_SRC

You can think of a data.frame as a list of columns, each is a vector
of the same size, but of different type. Say we want to perform some
computation on all families with a mother younger than 30. First we
need to select the =age_mother= column, which we can do using the
double-square-bracket operator, or the dollar-sign operator (which is
just an abbreviation for the case of selecting a column with a literal
name).

#+BEGIN_SRC R
  families.df[["age_mother"]]
  families.df$age_mother
  families.df$age_mother < 30
#+END_SRC

Note that the less-than operator =<= is used to create a logical
vector that we can use to determine if each row meets our selection
criteria: TRUE for age less than 30, FALSE otherwise. Read =help("<")=
for more info about this and other binary operators.

*Exercise:* how could you select only the families with 3 children?
Hint: try looking at the help pages of =is.na=, and =!=.

The single-square-bracket operator works differently for data.frames
-- it takes two arguments:
- the first argument is used to select a subset of rows,
- the second argument is used to select a subset of columns.

Thus to select all families with a mother younger than 30, we can write

#+BEGIN_SRC R
  families.df[families.df$age_mother < 30, ]
#+END_SRC

*Exercise:* how would you select all families with three children, and
a mother who is less than 30? Hint: read =help("&")=.

Already for this very simple operation we have to repeat ourselves in
the code (we mention the =families.df= data.frame twice in the code
above).

*** Advantages of data.table

=data.table= is a package that provides an efficient alternative to R's
native =data.frame=. How is it more efficient?
- Faster to code. Less repetition.
- Faster computation. Less copying objects in memory.

Let's perform the same operations as the previous section using
data.table:

#+BEGIN_SRC R
  library(data.table)
  families.dt <- fread("melt_default.csv")
  families.dt
  str(families.dt)
#+END_SRC

Note how the data.table displays almost the same as the data.frame in
the output. *Exercise:* talk with your neighbor, what are the
differences?

To select the subset of families with a mother younger than 30, we can
use variable names directly in the first argument (without a second
reference to =families.dt=).

#+BEGIN_SRC R
  families.dt[age_mother < 30, ]
#+END_SRC

*Exercise:* how would you select all families with three children, and
a mother who is less than 30?

*Exercise:* try timing =read.csv= versus =fread= using the base
=system.time= function, or the =microbenchmark= package. On this small
data set, there should not be a huge difference. But on larger data
sets (over 10MB, [[http://cbio.ensmp.fr/~thocking/data/overlap-benchmark.tgz][for example]]), there should be noticeable speed
advantage for =fread=.

#+BEGIN_SRC R
  system.time(big.df <- read.table("overlap-benchmark/chip-seq.bedGraph"))
  system.time(big.dt <- fread("overlap-benchmark/chip-seq.bedGraph"))
#+END_SRC

*** Converting between tall and wide data

Work examples from [[https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html][data.table reshape vignette]] on the R command line.

*Exercise:* use =melt= and =dcast= on one of your criminology data sets.

Recommended reading: Tidy data JSS paper
https://www.jstatsoft.org/article/view/v059i10

*** DT[, second arg] for computing on columns

TODO next week.

*** DT[, value, by=var] for computing value conditional on var

TODO next week.

*** Data output to CSV

Base R has =write.csv=, data.table has =fwrite= (faster).

*** Summary
- The data.frame object is how a CSV table is represented in base R.
- The data.table package provides a more efficient alternative (faster
  both in terms of coding and computation time).
- The =melt= and =dcast= functions can be used for converting a data set
  from long to wide format.

** Extra topics
*** Data visualization with ggplot2
http://members.cbio.mines-paristech.fr/~thocking/animint-book/Ch02-ggplot2.html
*** Reading date and times into R

=fread= converts a date/time column in a CSV file to a character
vector columns of a =data.table=. The =strptime= function can be used
to convert most date/time strings to numeric format. 

Criminology data example [[file:transactions.txt]]

#+BEGIN_SRC 
seller buyer date
567    577   2007-10-30
225    567   2007-11-15
1019   1190  2007-11-19
2      983   2007-11-26
2      983   2007-11-27
567    1257  2007-11-28
#+END_SRC

one data set when strptime did not work for me is
https://github.com/tdhock/montreal-velos/blob/master/velos.R -- I had
to use a character vector to convert non-standard month names to
numeric dates.

*Packages* that attempt to simplify reading of dates and times are
[[https://github.com/gaborcsardi/parsedate][parsedate]] and [[https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html][lubridate]].

*** Named capture regular expressions

https://github.com/tdhock/regex-tutorial


*** Reading and writing files from other programs in R

SAS, SPSS, STATA http://haven.tidyverse.org/

Excel -- just save as CSV. Or use http://readxl.tidyverse.org/

*** for/while/if

TODO list of data.tables idiom.

** Survey

https://docs.google.com/forms/d/e/1FAIpQLSfTYlOBCPs7eYLRmgs_L5nCOvPEJcooSRlNy8DWScWwvAnEyA/viewform?usp=sf_link
